'''
로봇 청소기와 방의 상태가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

n*m 직사각형
동서남북

1. 현재 칸이 아직 청소되지 않은 경우 현재 칸을 청소함

2. 주변에 청소되지 않은 빈칸이 없는 경우 = 먼지칸이 없다
바라보는 방향을 유지한 채로 한 칸 후진할 수 있으면 - 한 칸 후진하고 1번
근데 뒤쪽 칸이 벽이면 작동을 멈춤

3. 청소되지 않은 빈칸이있는 경우 = 먼지칸이 있다
반시계방향으로 90도 회전: (-1, -1) 처리를 해준다. 
바라보는 방향으로 앞쪽칸이 청소되지않았으면 한 칸 전진한다
1번으로 돌아간다. 

<입력값>
방의 크기
로청 좌표, 로청 방향 (0북 1동 2남 3서) (시계방향)
각 장소의 상태: 0-청소되지않음 1-벽, 로청이 있는 칸은 항상 빈 칸이다. 

<문제>
로청이 작동을 시작한 후 작동을 멈출 때까지 청소하는 칸의 개수
'''

'''

현재위치가 0이면 -> 1로 바꾸고 / count ++
그리고 동서남북을 살핀다 
    (1) 빈칸이 있는 경우 (=먼지칸이 있다)
    반시계 90도 회전하면서 먼지칸을 찾는다 - 자기가 바라보는 방향에서 꺾인다 - 방향마다 다르다
    먼지칸이 앞에 올 때까지 회전하고 - 앞에 온다면 - 전진
    (2) 먼지칸이 없다
    후진 (깨끗칸이 나올 때까지... )


'''

n, m = map(int, input().split())
#로청 좌표 (r,c), 방향d
r,c,d = map(int, input().split())

arr = [ list(map(int, input().split())) for _ in range(m) ]

dx = [-1, 0, 1, 0]
dy = [0,1,0,-1]

#범위내에서 이동하는지 확인하기 위한 코드
def in_range(x, y):
    return 0<=x<n and 0<=y<m

def clean(r.c):
    arr[r][c] = -1 #청소표시는 -1


while True:
    #1번
    #0이면 1로 바꿔준다ㅣ
    if arr[r][c] == 0:
        clean(r, c)

    #2번 - 반시계 방향으로 주위를 둘러본다
    for _ in range(4):
        #이게뭐지 (방향-1)%4
        d = (d-1) % 4
        nx, ny = r + dx[d], c + dy[d]
    #2-1. 만약 먼지칸이 있으면 
        if in_range(r,c) and arr[nx][ny] ==0:
            r, c = nx, ny
            break
    # 
    #2-2. 먼지칸이 아예 없으면 - 후진한다  
    else: 
        r, c = r+dx[d]*(-1), c+dy[d]*(-1)
        
        if in_range(x, y) and area[x][y] == 1 or not in_range(r, c):
            print(cnt)
            return 

